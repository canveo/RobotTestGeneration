<?xml version="1.0"?>
<launch>

  <arg name="ignore_collisions" default="false" />
  <arg name="render_stereo" default="0" />

  <arg name="test_name" default="test.txt"/>
  <arg name="test_location" default="/home/autosoftlab/Desktop/RobotTestGeneration"/>
  
  <arg name="save_name" default="performance.txt"/>
  <arg name="save_location" default="/home/autosoftlab/Desktop/RobotTestGeneration"/>

  <arg name="ip" default="127.0.01" />
  <arg name="port" default="25001" />

  <arg name="acceptance_distance" default="1" />

  <!-- Set minsnap, 0 standard trajectory -->
  <!-- Set minsnap, 1 constraints are to go through waypoints while minimizing snap -->
  <!-- Set minsnap, 2 constraints are to go keep a certain radius away from straight trajectory while minimizing snap -->
  <arg name="minsnap" default="2" />

  <!-- Set the requested velocity, -2 is unstable waypoint mode -->
  <!-- Set the requested velocity, -1 is waypoint mode -->
  <!-- Set the requested velocity, +ve is constant vel mode -->
  <arg name="speed" default="-1" />

  <group if="$(eval arg('minsnap') == 0)">
    <!-- Recommend speed to be set to -1 -->
    <node pkg="flightcontroller" type="straight_controller.py" name="straight_controller_node" output="screen">
      <param name="test_location" type="string" value="$(arg test_location)"/>
      <param name="test_name" type="string" value="$(arg test_name)"/>
      <param name="acceptance_distance" type="int" value="$(arg acceptance_distance)"/>
    </node>
  </group>

  <group if="$(eval arg('minsnap') != 0)">
    <node pkg="flightcontroller" type="minsnap_controller.py" name="minsnap_controller_node" output="screen">
      <param name="test_location" type="string" value="$(arg test_location)"/>
      <param name="test_name" type="string" value="$(arg test_name)"/>
      <param name="min_snap" type="int" value="$(arg minsnap)"/>
      <param name="acceptance_distance" type="int" value="$(arg acceptance_distance)"/>
      <param name="corridor_size" type="double" value="0.2"/>
    </node>
  </group>

  <include file="$(find flightcontroller)/launch/angle.launch">
    <arg name="save_name" default="angle_log.txt"/>
    <arg name="save_location" default="$(arg save_location)"/>
  </include>

  <include file="$(find flightcontroller)/launch/velocity.launch">
    <arg name="save_name" default="velocity_log.txt"/>
    <arg name="save_location" default="$(arg save_location)"/>
  </include>

  <include file="$(find flightcontroller)/launch/position.launch">
    <arg name="save_name" default="position_log.txt"/>
    <arg name="save_location" default="$(arg save_location)"/>
    <arg name="speed" value="$(arg speed)"/>
  </include>

  <!--include core flightgoggles launch file-->
  <include file="$(find flightgoggles)/launch/core.launch">
    <arg name="render_stereo" value="$(arg render_stereo)"/>
    <arg name="ignore_collisions" value="$(arg ignore_collisions)"/>
    <arg name="ip" value="$(arg ip)"/>
    <arg name="port" value="$(arg port)"/>
  </include>

  <node pkg="flightcontroller" type="performance_analyzer.py" name="performance_tester_node">
    <param name="save_location" type="string" value="$(arg save_location)"/>
    <param name="save_name" type="string" value="$(arg save_name)"/>
  </node>

  <!--<node pkg="rqt_plot" type="rqt_plot" name="angle_plot" args="/uav/input/attitude/x /uav/sensors/attitude/x /uav/input/attitude/y /uav/sensors/attitude/y /uav/input/attitude/z /uav/sensors/attitude/z">
  </node>

  <node pkg="rqt_plot" type="rqt_plot" name="velocity_plot" args="/uav/input/velocity/x /uav/sensors/velocity/x /uav/input/velocity/y /uav/sensors/velocity/y /uav/input/velocity/z /uav/sensors/velocity/z">
  </node>-->

  <node pkg="rqt_plot" type="rqt_plot" name="distance_to_goal" args="/distance_to_goal">
  </node>

</launch>